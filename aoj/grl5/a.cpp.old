#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;

struct edge{
	int to,weight;
	edge(int v,int w):to(v),weight(w){}
};

vector<edge> G[100000];
long dist[100000];

void dfs(int idx, int p){
	for(edge& e:G[idx])if(e.to!=p)
	{
		dfs(e.to,idx);
		dist[idx]=max(dist[idx],dist[e.to]+e.weight);
	}
}

int dfs2(int idx,int d_par,int par){
	vector<pair<int,int>>d_child;
	d_child.emplace_back(0,-1);
	for(edge& e: G[idx]){
		if(e.to==par)d_child.emplace_back(d_par+e.weight,e.to);
		else d_child.emplace_back(e.weight+dist[e.to],e.to);
	}
	sort(d_child.rbegin(), d_child.rend());
	int ret=d_child[0].first+d_child[1].first;
	for(edge& e: G[idx])if(e.to!=par){
		ret=max(ret,dfs2(e.to,d_child[d_child[0].second==e.to].first,idx));
	}
	return ret;
}

int main(){
	int N;
	cin>>N;
	for(int i=0;i<N-1;i++){
		int u,v,w;
		cin>>u>>v>>w;
		G[u].push_back(edge(v,w));
		G[v].push_back(edge(u,w));
	}
	dfs(0,-1);
	cout<<dfs2(0,0,-1)<<endl;
}
