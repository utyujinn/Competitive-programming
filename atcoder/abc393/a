#include<iostream>
#include<vector>
#include<map>
#include<algorithm>
using namespace std;

vector<int> divisor(int n){
	vector<int> ret;
	for(int i=1;i*i<=n;i++){
		if(n%i==0){
			ret.push_back(i);
			if(i*i!=n)ret.push_back(n/i);
		}
	}
	sort(ret.rbegin(),ret.rend());
	return ret;
}

int main(){
	int N,K;
	cin>>N>>K;
	vector<int> A(N);
	for(int i=0;i<N;i++){
		cin>>A[i];
	}
	auto B=A;
	sort(B.begin(),B.end());
	for(int i=0;i<N;i++){
		auto div=divisor(A[i]);
		map<int,int> mp;
		int big=0;
		for(int j=2;j*A[i]<=B[N-1];j++){
			int up=lower_bound(B.begin(),B.end(),j*A[i]+1)-B.begin();
			int down=lower_bound(B.begin(),B.end(),j*A[i])-B.begin();
			big+=up-down;
		}
		for(int j=0;j<div.size();j++){
			mp[div[j]]+=big;
			int up=lower_bound(B.begin(),B.end(),div[j]+1)-B.begin();
			int down=lower_bound(B.begin(),B.end(),div[j])-B.begin();
			auto div2=divisor(div[j]);
			for(int k=0;k<div2.size();k++){
				mp[div2[k]]+=(up-down);
				cout<<div2[k]<<"a"<<mp[div2[k]]<<up-down<<endl;
			}
		}
		int ans=1;
		for(auto a:mp){
			cout<<a.first<<" "<<a.second<<endl;
			if(a.second>=K){
				ans=max(ans,a.first);
			}
		}
		cout<<ans<<endl;
	}
}
