#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;

vector<int> divisor(int n){
	vector<int> ret;
	for(int i=1;i*i<=n;i++){
		if(n%i==0){
			ret.push_back(i);
			if(i*i!=n)ret.push_back(n/i);
		}
	}
	sort(ret.rbegin(),ret.rend());
	return ret;
}

vector<int> prime(int n){
	vector<int> ret;
	for(int i=2;i*i<=n;i++){
		if(n%i==0){
			ret.push_back(i);
			while(n%i==0)n/=i;
		}
	}
	return ret;
}

void dfs(int n, vector<int> pr){
	for(int i=0;i<pr.size();i++)

int main(){
	int N,K;
	cin>>N>>K;
	vector<int> A(N);
	for(int i=0;i<N;i++){
		cin>>A[i];
	}
	auto B=A;
	sort(B.begin(),B.end());
	for(int i=0;i<N;i++){
		auto div=divisor(A[i]);
		auto pr=prime(A[i]);
		dfs(pr);
		for(int j=0;j<div.size();j++){
			cout<<div[j]<<endl;
			int up=lower_bound(B.begin(),B.end(),div[j]+1)-B.begin();
			int down=lower_bound(B.begin(),B.end(),div[j])-B.begin();
			if(up-down>=K){
				cout<<div[j]<<endl;
				break;
			}
		}
	}
}
