#include<iostream>
#include<vector>
using namespace std;
struct sRMQ{
	int N;
	vector<int> data;
	sRMQ(int _N){
		int a=1;
		while(a<_N)a<<=1;
		N=a;
		data.assign(2*N,~0U>>1);
	}
	void build(vector<int> origin){
		int os=origin.size();
		for(int i=0;i<os;i++){
			data[i+N]=origin[i];
		}
		int s=N/2,t=N;
		while(s!=0){
			for(int i=s;i<t;i++){
				data[i]=min(data[i*2],data[i*2+1]);
			}
			s>>=1,t>>=1;
		}
	}
	int get_sub(int l,int r,int k,int al,int ar){
		if(l>=ar||r<=al)return ~0U>>1;
		else if(al>=l&&ar<=r)return data[k];
		else{
			int gl=get_sub(l,r,k*2,al,(al+ar)/2);
			int gr=get_sub(l,r,k*2+1,(al+ar)/2,ar);
			return min(gl,gr);
		}
	}
	int get(int l,int r){
		return get_sub(l,r,1,0,N);
	}
};

int main(){
	ios::sync_with_stdio(false);
	cin.tie(0);
	int N,Q;cin>>N>>Q;
	vector<int> a(N);
	for(int i=0;i<N;i++)cin>>a[i];
	sRMQ rmq(N);
	rmq.build(a);
	for(;Q--;){
		int l,r;cin>>l>>r;
		cout<<rmq.get(l,r)<<"\n";
	}
}
