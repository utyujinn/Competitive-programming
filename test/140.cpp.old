#include<iostream>
#include<vector>
#include<limits>
using namespace std;

struct RMQ{
	int n;
	vector<int> list;
	RMQ(int _n){
		int a=1;
		while(a<_n){
			a<<=1;
		}
		n = a;
		list.assign(n*2,numeric_limits<int>::max());
	}
	void update(int i, int x){
		i = i + n;
		list[i] = x;
		while(i > 1){
			i >>= 1;
			list[i] = min(list[i*2],list[i*2+1]);
		}
	}
	int sub_find(int s, int e, int k, int l, int r){
		if(r <= s || l >= e)return numeric_limits<int>::max();
		else if(s <= l && r <= e){
			return list[k];
		}
		else{
			int lm = sub_find(s,e,k*2,l,(l+r)/2);
			int rm = sub_find(s,e,k*2+1,(l+r)/2,r);
			return min(lm,rm);
		}
	}
	int find(int s, int e){
		return sub_find(s,e,1,0,n);
	}
	void print(){
		for(int i = 0; i < n*2; i++){
			cout << list[i] << " ";
		}
		cout << endl;
	}
};

int main(){
	long n,x;
	cin >> n >> x;
	RMQ rmq(n);
	vector<int> a(n);
	for(int i = 0; i < n; i++){
		cin >> a[i];
		rmq.update(i,a[i]);
	}
	long ans = numeric_limits<long>::max();
	long sum;
	for(int k = 0; k < n; k++){
		sum = 0;
		for(int i = 0; i < n; i++){
			if(i-k<0){
				sum += min(rmq.find(0,i+1), rmq.find(n-(k-i),n));
			}else{
				sum += rmq.find(i-k,i+1);
			}
		}
		sum += k*x;
		ans = min(sum,ans);
	}
	cout << ans << endl;
}
