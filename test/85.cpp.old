#include<bits/stdc++.h>
#define rep(i, n) for(int i = 0; i < (n); i++)
#define per(i, n) for(int i = (n) - 1; i >= 0; i--)
using ll = long long;
#define vi vector<int>
#define vvi vector<vi>
#define vl vector<ll>
#define vvl vector<vl>
#define all(a) (a).begin(), (a).end()
#define rall(a) (a).rbegin(), (a).rend()
using namespace std;
template<class T, class U>
bool chmax(T &a, const U &b){ return a < b ? (a = b, 1) : 0; }
template<class T, class U>
bool chmin(T &a, const U &b){ return a > b ? (a = b, 1) : 0; }
const ll inf=1LL<<60;


struct UnionFind{
    vi parent,size;

    UnionFind(int n) : parent(n,-1), size(n,1){}

    int root(int x){
        if(parent[x]==-1)return x;
        return parent[x] = root(parent[x]);
    }

    bool isSame(int x,int y){
        return root(x)==root(y);
    }

    void unite(int x, int y){
        if(isSame(x,y))return;
        int rx = root(x);
        int ry = root(y);
        if(size[rx]<size[ry]){
            parent[rx] = ry;
            size[ry] += size[rx];
        }
        else{
            parent[ry] = rx;
            size[rx] += size[ry];
        }
    }
};

int main(void){
    ll n,q;
    cin >> n >> q; 
    UnionFind uf(n);
    while(q--){
        ll c,x,y;
        cin >> c >> x >> y;
        if(c==0){
            uf.unite(x,y);
        }
        else{
            bool flag = uf.isSame(x,y);
            if(flag)cout << 1 << endl;
            else cout << 0 << endl;
        }
    }
    return 0;
}